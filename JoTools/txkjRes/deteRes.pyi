
from .deteObj import DeteObj


class DeteRes(ResBase, ABC):
    """检测结果"""

    def __init__(self, xml_path:str=None, assign_img_path:str=None, json_dict:dict=None, log=None, redis_conn_info=None, img_redis_key=None):...
    def __contains__(self, item:DeteObj):...
    def __add__(self, other:DeteRes):...
    def __sub__(self, other:DeteObj):...
    def __len__(self):...
    def __getitem__(self, index:int):...
    def __setattr__(self, key, value):...
    # ------------------------------------------ transform -------------------------------------------------------------
    @property
    def alarms(self):...
    def _parse_xml_info(self):...
    def _parse_json_info(self):...
    def save_to_xml(self, save_path:str, assign_alarms=list, format=str):...
    def save_to_json(self, assign_alarms=dict):...
    def save_to_txt(self, txt_path:str):...
    def crop_dete_obj(self, save_dir, augment_parameter=None, method=None, exclude_tag_list=None, split_by_tag=False, include_tag_list=None, assign_img_name=None):...
    def crop_dete_obj_new(self, save_dir, augment_parameter=None, method=None, exclude_tag_list=None, split_by_tag=False, include_tag_list=None, assign_img_name=None):...
    def crop_angle_dete_obj(self, save_dir, augment_parameter=None, method=None, exclude_tag_list=None, split_by_tag=False):...
    def _parse_txt_info(self, classes_path, record_path):...
    # --------------------------------------------- id -----------------------------------------------------------------
    def get_dete_obj_by_id(self, assign_id):...
    def get_id_list(self):...
    def refresh_obj_id(self):...
    def get_crop_name_by_id(self, assign_id):...
    def get_sub_img_by_id(self, assign_id, augment_parameter=None, RGB=True, assign_shape_min=False):...
    def get_sub_img_by_dete_obj(self, assign_dete_obj, augment_parameter=None, RGB=True, assign_shape_min=False):...
    def get_sub_img_by_dete_obj_new(self, assign_dete_obj, augment_parameter=None, RGB=True, assign_shape_min=False):...
    @staticmethod
    def get_sub_img_by_dete_obj_from_crop(assign_dete_obj, RGB=True, assign_shape_min=False):...
    def del_sub_img_from_crop(self):...
    def get_img_array(self, RGB=True):...
    def get_img_array_new(self, RGB=True):...
    def get_dete_obj_list_by_id(self, assign_id, is_deep_copy=False):...
    def get_dete_obj_list_by_tag(self, need_tags, is_deep_copy=False):...
    # ------------------------------------------------ get -------------------------------------------------------------
    def add_obj(self, x1:int, y1:int, x2:int, y2:int, tag:str, conf=-1, assign_id=-1, describe=''):...
    def add_angle_obj(self, cx, cy, w, h, angle, tag, conf=-1, assign_id=-1, describe=''):...
    def add_obj_2(self, one_dete_obj):...
    def draw_dete_res(self, save_path=None, assign_img=None, line_thickness=2, color_dict=None):...
    def do_func(self, assign_func):...
    def do_nms(self, threshold=0.1, ignore_tag=False):...
    def do_nms_center_point(self, ignore_tag=False):...
    def do_nms_in_assign_tags(self, tag_list, threshold=0.1):...
    def update_tags(self, update_dict):...
    def reset_alarms(self, assign_alarms=None):...
    # ------------------------------------------------ filter ----------------------------------------------------------
    def filter_by_area(self, area_th, mode='gt', update=True):...
    def filter_by_area_ratio(self, ar=0.0006, update=True, mode='lt'):...
    def filter_by_tags(self, need_tag=None, remove_tag=None, update=True):...
    def filter_by_conf(self, conf_th, assign_tag_list=None, update=True, mode='gt'):...
    def filter_by_mask(self, mask, cover_index_th=0.5, need_in=True, update=True):...
    def filter_by_dete_res_mask(self, mask_dete_res, cover_index_th=0.5, update=True):...
    def filter_by_func(self, func, update=True):...
    def filter_by_topn(self, nn, update=True):...
    def filter_by_attr(self, attr_name, attr_value, update=True):...
    # ----------------------------------------------- update -----------------------------------------------------------
    def update_attr_for_all_obj(self, attr_name, attr_value, update=True):...
    # ----------------------------------------------- set --------------------------------------------------------------
    def intersection(self, other):...
    def intersection_update(self, other):...
    def union(self, other):...
    def difference(self, other):...
    def difference_update(self, other):...
    def issubset(self, other):...
    def isupperset(self, other):...
    # ----------------------------------------------- del --------------------------------------------------------------
    def del_dete_obj(self, assign_dete_obj, del_all=False):...
    # ----------------------------------------------- func -------------------------------------------------------------
    def get_dete_obj_list_by_func(self, func, is_deep_copy=False):...
    # ----------------------------------------------- set --------------------------------------------------------------
    def do_augment(self, augment_parameter, is_relative=True):...
    # ----------------------------------------------- txkj -------------------------------------------------------------
    def get_fzc_format(self):...
    def print_as_fzc_format(self):...
    def get_result_construction(self, model_name="None", start_time=None, end_time=None):...
    def get_return_jsonify(self, script_name=None, obj_name=None):...
    def deep_copy(self, copy_img=False):...
    # ------------------------------------------------------------------------------------------------------------------
    def offset(self, x, y):...
    def crop_with_xml(self, augment_parameter, save_dir, split_by_tag=False, need_tags=None):...
    # ------------------------------------------------------------------------------------------------------------------
    def has_tag(self, assign_tag):...
    def save_assign_range(self, assign_range, save_dir, save_name=None, iou_1=0.85):...
    def count_tags(self):...
    def angle_obj_to_obj(self):...
    # -------------------------------------------其他人写的函数，需要进行整理 -------------------------------------
    def get_obj_middle_points_by_tags(self,tags):...
    def get_obj_right_points_by_tags(self,tags):...
    def fuse_tag1_tag2_into_tag3_with_func(self,tag1,tag2,tag3,func):...
    def filter_tag1_by_tag2_with_nms(self,tag1,tag2,threshold=0.5):...
    def filter_by_boundary(self,xmin,xmax,ymin,ymax,need_tags=[]):...
    def do_augment_short_long(self, augment_parameter_short, augment_parameter_long, is_relative=True, need_tags=[]):...
    def filter_by_w_h(self, th_w, th_h):...
    def filter_by_des(self, need_des=None, remove_des=None):...
    def set_des(self,des_label):...
